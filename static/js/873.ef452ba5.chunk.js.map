{"version":3,"file":"static/js/873.ef452ba5.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactsForm/ContactsForm.module.css?d5f2","components/ContactsForm/ContactsForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/contacts/contacts-selector.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\",\"title\":\"Section_title__SLHvV\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.section}>\n      <h1 className = {s.title}>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\"};","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nfunction ContactList(props) {\n  const { items, onDeleteContact } = props;\n\n  return (\n    <ul>\n      {items.map(({ name, number, id }) => (\n        <li className={s.item} key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <button\n            className={s.button}\n            onClick={() => onDeleteContact(id)}\n            type=\"button\"\n          >\n            delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__1Y65-\",\"label\":\"ContactsForm_label__Z7jht\",\"inputName\":\"ContactsForm_inputName__GJEx-\",\"inputNumber\":\"ContactsForm_inputNumber__RYlRE\",\"button\":\"ContactsForm_button__zuUB3\",\"error\":\"ContactsForm_error__ateuU\"};","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport s from './ContactsForm.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactsForm = ({ catchSubmitInfo }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string()\n          .matches(\n            /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n            'Should have letters, apostrophe, dash, spaces'\n          )\n          .min(2, 'Your name less then 2 symbols? Are you kidding?')\n          .required('Required'),\n        number: Yup.string()\n          .min(7, 'Must be 7 digits or more')\n          .required('Required'),\n        // на случай когда не строка в число будет типом - проверка на типы\n        // .typeError('you must specify a number'),\n      })}\n      // values это наш стейт formika\n      onSubmit={(values, props) => {\n        const { resetForm } = props;\n        console.log('props: ', props);\n        catchSubmitInfo({ ...values });\n        resetForm();\n      }}\n    >\n      {props => {\n        const { values, handleChange, handleSubmit, errors } = props;\n        console.log('errors: ', errors);\n        return (\n          <Form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label}>\n              Name\n              <Field\n                className={s.inputName}\n                type=\"text\"\n                name=\"name\"\n                value={values.name}\n                onChange={handleChange}\n              />{' '}\n              <ErrorMessage name=\"name\" component=\"div\" className={s.error} />\n            </label>\n\n            <label className={s.label}>\n              Number\n              <Field\n                className={s.inputNumber}\n                type=\"tel\"\n                name=\"number\"\n                value={values.number}\n                onChange={handleChange}\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              />\n              <ErrorMessage name=\"number\" component=\"div\" className={s.error} />\n            </label>\n\n            <button\n              className={s.button}\n              type=\"submit\"\n              disabled={errors.name || errors.number}\n            >\n              Add contact\n            </button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nContactsForm.propTypes = {\n  catchSubmitInfo: PropTypes.func.isRequired,\n};\n\nexport default ContactsForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nfunction Filter(props) {\n  const { filterValue, onFilter } = props;\n  return (\n    <label className={s.filter}>\n      Find contacts by name\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        value={filterValue}\n        onChange={onFilter}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  filterValue: PropTypes.string,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","export const getContacts = store => {\n  return store.phonebook;\n};\n","import { useEffect } from 'react';\nimport { Section, ContactsForm, ContactList, Filter } from 'components';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchContacts,\n  removeContact,\n  addContact,\n} from 'redux/contacts/contacts-operations';\nimport { filterContact } from '../../redux/contacts/contacts-slice';\nimport { getContacts } from '../../redux/contacts/contacts-selector';\n\nconst ContactsPage = () => {\n  const { items, filter, loading } = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onAddContact = data => {\n    return dispatch(addContact(data));\n  };\n\n  const onRemoveContact = id => dispatch(removeContact(id));\n  const onfilterContact = e => dispatch(filterContact(e.target.value));\n  const getVisibleContacts = () => {\n    const normalized = filter.toLowerCase().trim();\n    return items.filter(item => item.name.toLowerCase().includes(normalized));\n  };\n\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        {loading && <p>...Loading</p>}\n        <ContactsForm catchSubmitInfo={onAddContact} />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter filterValue={filter} onFilter={onfilterContact} />\n        {items ? (\n          <ContactList\n            items={getVisibleContacts()}\n            onDeleteContact={onRemoveContact}\n          />\n        ) : (\n          <p>Your phonebook is empty</p>\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["title","children","className","s","props","items","onDeleteContact","map","name","number","id","onClick","type","catchSubmitInfo","initialValues","validationSchema","Yup","shape","matches","min","required","onSubmit","values","resetForm","console","log","handleChange","handleSubmit","errors","value","onChange","component","disabled","filterValue","onFilter","pattern","getContacts","store","phonebook","useSelector","filter","loading","dispatch","useDispatch","useEffect","fetchContacts","data","addContact","e","filterContact","target","normalized","toLowerCase","trim","item","includes","getVisibleContacts","removeContact"],"sourceRoot":""}