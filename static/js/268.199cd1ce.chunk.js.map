{"version":3,"file":"static/js/268.199cd1ce.chunk.js","mappings":"qNACA,EAAuB,wBAAvB,EAAqD,uBAArD,EAAoF,yBAApF,EAAqH,yBAArH,EAAsJ,yBAAtJ,EAAuL,yB,SC+EvL,EA5EkB,SAAC,GAAuB,IAArBA,EAAoB,EAApBA,cACnB,OACE,SAAC,KAAD,CACEC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,KAAaC,MAAM,CACnCJ,MAAOG,EAAAA,KAAaH,MAAM,yBAAyBK,SAAS,YAE5DJ,SAAUE,EAAAA,KACPG,QACC,6CACA,iDAEDC,IAAI,EAAG,sCACPF,SAAS,cAIdG,SAAU,SAACC,EAAQC,GACjB,IAAQC,EAAcD,EAAdC,UACRb,GAAc,UAAKW,IACnBE,GACD,EAtBH,SAwBG,SAAAD,GACC,IAAQD,EAA+CC,EAA/CD,OAAQG,EAAuCF,EAAvCE,aAAcC,EAAyBH,EAAzBG,aAAcC,EAAWJ,EAAXI,OAC5C,OACE,UAAC,KAAD,CAAMC,UAAWC,EAAQR,SAAUK,EAAnC,WACE,iBAAKE,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,QACLC,MAAOV,EAAOT,MACde,UAAWC,EACXI,SAAUR,KAEZ,kBAAOS,QAAQ,QAAQN,UAAWC,EAAlC,oBAGA,SAAC,KAAD,CAAcC,KAAK,QAAnB,SACG,SAAAK,GAAG,OAAI,gBAAKP,UAAWC,EAAhB,SAA0BM,GAA9B,QAIR,iBAAKP,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEC,KAAK,WACLC,KAAK,WACLC,MAAOV,EAAOR,SACdc,UAAWC,EACXI,SAAUR,KAEZ,kBAAOS,QAAQ,WAAWN,UAAWC,EAArC,uBAGA,SAAC,KAAD,CAAcC,KAAK,WAAnB,SACG,SAAAK,GAAG,OAAI,gBAAKP,UAAWC,EAAhB,SAA0BM,GAA9B,QAIR,mBACEJ,KAAK,SACLH,UAAWC,EACXO,SAAUT,EAAOG,MAAQH,EAAOU,OAHlC,sBASL,GAGN,E,8BCtDD,EAlBkB,WAChB,IAAMC,GAAWC,EAAAA,EAAAA,MAKXC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GAC3B,OACE,0BACIF,GAGA,uDAFA,SAAC,EAAD,CAAW7B,cAPD,SAAAgC,GACdL,GAASM,EAAAA,EAAAA,IAAMD,GAChB,KAWF,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"btn\":\"LoginForm_btn__B2KLK\",\"block\":\"LoginForm_block__dqQ68\",\"label\":\"LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\",\"error\":\"LoginForm_error__012y+\"};","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport s from './LoginForm.module.css';\n\nconst LoginForm = ({ onSubmitClick }) => {\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email('Invalid email address').required('Required'),\n\n        password: Yup.string()\n          .matches(\n            /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*$/,\n            'Must numbers, english small and large letters'\n          )\n          .min(8, 'Email must be 8 characters or more')\n          .required('Required'),\n        // .typeError('you must specify a number')\n      })}\n      // values это наш стейт formika\n      onSubmit={(values, props) => {\n        const { resetForm } = props;\n        onSubmitClick({ ...values });\n        resetForm();\n      }}\n    >\n      {props => {\n        const { values, handleChange, handleSubmit, errors } = props;\n        return (\n          <Form className={s.form} onSubmit={handleSubmit}>\n            <div className={s.block}>\n              <Field\n                name=\"email\"\n                type=\"email\"\n                value={values.email}\n                className={s.input}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"email\" className={s.label}>\n                Email\n              </label>\n              <ErrorMessage name=\"email\">\n                {msg => <div className={s.error}>{msg}</div>}\n              </ErrorMessage>\n            </div>\n\n            <div className={s.block}>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                value={values.password}\n                className={s.input}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"password\" className={s.label}>\n                Password\n              </label>\n              <ErrorMessage name=\"password\">\n                {msg => <div className={s.error}>{msg}</div>}\n              </ErrorMessage>\n            </div>\n\n            <button\n              type=\"submit\"\n              className={s.btn}\n              disabled={errors.name || errors.number}\n            >\n              Submit\n            </button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport { login } from '../../redux/auth/auth-operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getToken } from 'redux/auth/auth-selector';\n\n// все данные с формы прилетают в onSubmitClick -> onLogin -> data-> dispatch выполняет операцию signup\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n\n  const onLogin = data => {\n    dispatch(login(data));\n  };\n  const isAuth = useSelector(getToken);\n  return (\n    <main>\n      {!isAuth ? (\n        <LoginForm onSubmitClick={onLogin} />\n      ) : (\n        <h2>Now you can use Phonebook</h2>\n      )}\n    </main>\n  );\n};\n\nexport default LoginPage;\n"],"names":["onSubmitClick","initialValues","email","password","validationSchema","Yup","shape","required","matches","min","onSubmit","values","props","resetForm","handleChange","handleSubmit","errors","className","s","name","type","value","onChange","htmlFor","msg","disabled","number","dispatch","useDispatch","isAuth","useSelector","getToken","data","login"],"sourceRoot":""}