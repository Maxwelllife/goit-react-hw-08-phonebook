{"version":3,"file":"static/js/488.72122671.chunk.js","mappings":"qNACA,EAAuB,2BAAvB,EAAwD,0BAAxD,EAA0F,4BAA1F,EAA8H,4BAA9H,EAAkK,4BAAlK,EAAsM,4B,SCkGtM,EA/FqB,SAAC,GAAuB,IAArBA,EAAoB,EAApBA,cACtB,OACE,SAAC,KAAD,CACEC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,KAAaC,MAAM,CACnCL,KAAMI,EAAAA,KACHE,QACC,yHACA,oCAEDC,IAAI,EAAG,gCACPC,SAAS,YACZP,MAAOG,EAAAA,KAAaH,MAAM,yBAAyBO,SAAS,YAC5DN,SAAUE,EAAAA,KACPE,QACC,6CACA,iDAEDC,IAAI,EAAG,sCACPC,SAAS,cAIdC,SAAU,SAACC,EAAQC,GACjB,IAAQC,EAAcD,EAAdC,UACRC,QAAQC,IAAI,UAAWH,GACvBb,GAAc,UAAKY,IACnBE,GACD,EA9BH,SAgCG,SAAAD,GACC,IAAQD,EAA+CC,EAA/CD,OAAQK,EAAuCJ,EAAvCI,aAAcC,EAAyBL,EAAzBK,aAAcC,EAAWN,EAAXM,OAC5C,OACE,UAAC,KAAD,CAAMC,UAAWC,EAAQV,SAAUO,EAAnC,WACE,iBAAKE,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEnB,KAAK,OACLoB,KAAK,OACLC,MAAOX,EAAOV,KACdkB,UAAWC,EACXG,SAAUP,KAEZ,kBAAOQ,QAAQ,OAAOL,UAAWC,EAAjC,mBAGA,SAAC,KAAD,CAAcnB,KAAK,OAAOwB,UAAU,MAAMN,UAAWC,QAEvD,iBAAKD,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEnB,KAAK,QACLoB,KAAK,QACLC,MAAOX,EAAOT,MACdiB,UAAWC,EACXG,SAAUP,KAEZ,kBAAOQ,QAAQ,QAAQL,UAAWC,EAAlC,oBAGA,SAAC,KAAD,CAAcnB,KAAK,QAAnB,SACG,SAAAyB,GAAG,OAAI,gBAAKP,UAAWC,EAAhB,SAA0BM,GAA9B,QAGR,iBAAKP,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEnB,KAAK,WACLoB,KAAK,WACLC,MAAOX,EAAOR,SACdgB,UAAWC,EACXG,SAAUP,KAEZ,kBAAOQ,QAAQ,WAAWL,UAAWC,EAArC,uBAGA,SAAC,KAAD,CAAcnB,KAAK,WAAnB,SACG,SAAAyB,GAAG,OAAI,gBAAKP,UAAWC,EAAhB,SAA0BM,GAA9B,QAGR,mBACEL,KAAK,SACLF,UAAWC,EACXO,SAAUT,EAAOjB,MAAQiB,EAAOU,OAHlC,sBASL,GAGN,E,oBC9ED,EAdqB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,2BACE,SAAC,EAAD,CAAc/B,cANC,SAAAgC,GACjBF,GAASG,EAAAA,EAAAA,IAAOD,GACjB,KAOF,C","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"btn\":\"RegisterForm_btn__bgTuW\",\"block\":\"RegisterForm_block__9f3Q-\",\"label\":\"RegisterForm_label__4pTXF\",\"input\":\"RegisterForm_input__FsgBz\",\"error\":\"RegisterForm_error__yDHjz\"};","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport s from './RegisterForm.module.css';\n\nconst RegisterForm = ({ onSubmitClick }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string()\n          .matches(\n            /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n            'Must be only charaters and space'\n          )\n          .min(2, 'Must be 2 characters or more')\n          .required('Required'),\n        email: Yup.string().email('Invalid email address').required('Required'),\n        password: Yup.string()\n          .matches(\n            /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*$/,\n            'Must numbers, english small and large letters'\n          )\n          .min(8, 'Email must be 8 characters or more')\n          .required('Required'),\n        // .typeError('you must specify a number')\n      })}\n      // values это наш стейт formika\n      onSubmit={(values, props) => {\n        const { resetForm } = props;\n        console.log('props: ', props);\n        onSubmitClick({ ...values });\n        resetForm();\n      }}\n    >\n      {props => {\n        const { values, handleChange, handleSubmit, errors } = props;\n        return (\n          <Form className={s.form} onSubmit={handleSubmit}>\n            <div className={s.block}>\n              <Field\n                name=\"name\"\n                type=\"text\"\n                value={values.name}\n                className={s.input}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"name\" className={s.label}>\n                Name\n              </label>\n              <ErrorMessage name=\"name\" component=\"div\" className={s.error} />\n            </div>\n            <div className={s.block}>\n              <Field\n                name=\"email\"\n                type=\"email\"\n                value={values.email}\n                className={s.input}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"email\" className={s.label}>\n                Email\n              </label>\n              <ErrorMessage name=\"email\">\n                {msg => <div className={s.error}>{msg}</div>}\n              </ErrorMessage>\n            </div>\n            <div className={s.block}>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                value={values.password}\n                className={s.input}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"password\" className={s.label}>\n                Password\n              </label>\n              <ErrorMessage name=\"password\">\n                {msg => <div className={s.error}>{msg}</div>}\n              </ErrorMessage>\n            </div>\n            <button\n              type=\"submit\"\n              className={s.btn}\n              disabled={errors.name || errors.number}\n            >\n              Submit\n            </button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { signup } from '../../redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\n\n// все данные с формы прилетают в onSubmitClick -> onRegister -> data-> dispatch выполняет операцию signup\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const onRegister = data => {\n    dispatch(signup(data));\n  };\n\n  return (\n    <main>\n      <RegisterForm onSubmitClick={onRegister} />\n    </main>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["onSubmitClick","initialValues","name","email","password","validationSchema","Yup","shape","matches","min","required","onSubmit","values","props","resetForm","console","log","handleChange","handleSubmit","errors","className","s","type","value","onChange","htmlFor","component","msg","disabled","number","dispatch","useDispatch","data","signup"],"sourceRoot":""}